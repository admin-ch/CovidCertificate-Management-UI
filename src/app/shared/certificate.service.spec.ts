import {TestBed} from '@angular/core/testing';

import {CertificateService} from './certificate.service';
import {ApiService} from './api.service';
import {
	recoveryPatient,
	recoveryPatientDto,
	testPatient,
	testPatientDto,
	vaccinationPatienDto,
	vaccinationPatient
} from './mocks';
import {Shipping, ShippingOptions} from 'shared/model';

describe('CertificateService', () => {
	let service: CertificateService;
	let api: ApiService;

	const shipping: Shipping = {shippingOption: ShippingOptions.PDF};

	beforeEach(() => {
		TestBed.configureTestingModule({
			providers: [{provide: ApiService, useValue: {post: jest.fn(), get: jest.fn()}}]
		});
		service = TestBed.inject(CertificateService);
		api = TestBed.inject(ApiService);
	});

	it('should be created', () => {
		expect(service).toBeTruthy();
	});

	it('should call create vaccination certificate with the correct URL', () => {
		service.createCertificate(vaccinationPatient, shipping);

		expect(api.post).toHaveBeenCalledWith('covidcertificate/vaccination', vaccinationPatienDto);
	});

	it('should call create test certificate with the correct URL', () => {
		service.createCertificate(testPatient, shipping);

		expect(api.post).toHaveBeenCalledWith('covidcertificate/test', testPatientDto);
	});

	it('should call create recovery certificate with the correct URL', () => {
		service.createCertificate(recoveryPatient, shipping);

		expect(api.post).toHaveBeenCalledWith('covidcertificate/recovery', recoveryPatientDto);
	});

	it('should get the value sets with the correct URL', () => {
		service.getValueSets();

		expect(api.get).toHaveBeenCalledWith('valuesets');
	});

	it('blob should have pdf type', () => {
		const pdfString =
			'data:application/pdf;base64,JVBERi0xLjQKJeLjz9MKMiAwIG9iago8PC9UeXBlL1hPYmplY3QvU3VidHlwZS9JbWFnZS9XaWR0aCA4MjcvSGVpZ2h0IDgyNy9MZW5ndGggMjI1NC9Db2xvclNwYWNlL0RldmljZUdyYXkvRGVjb2RlUGFybXM8PC9CaXRzUGVyQ29tcG9uZW50IDEvUHJlZGljdG9yIDE1L0NvbHVtbnMgODI3L0NvbG9ycyAxPj4vQml0c1BlckNvbXBvbmVudCAxL0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCnhe7Zs7ktw4EERrQ8aYcwQehUcjj8aj8Agy29hYLDPrA7JHchizilgw0xC7WIV8kJNCoFvW/ox2e3/zH0mg2xLotgS6LYFuS6DbKpAd+qv9xGNq9tHaP/gYmjGx8mN0lr+r+emd9vJySeswmGA9CySQCSTQg0B8bFjEgi33npo7RAdj2A9BR+cYy4LiTlkcY4eqIxDGBGJDIIwJxMawoEY7tiDPaMYyw5edNR1AvRS+hjrth/WP3LZA7iCQQCbQE0A7zrpsHUk8+cpD6w849I5xjCdndKDYj4u5ThC3zbEdDYFMIIGyYwIND0qHiGUPbIjeheV+UuHQ5VR2GOVzFKQKtGdDIIH2bAg0LAgOR0UtKPGBp+Cw46KFuf7yTkOBDq8WMspLtW0afDQSIIEEEmgSaHTQyjmCmN4WScw5djoIi6rjBTtGu76G+onX7iaQQAIJFBof1DhniOVs4RDbYguWGW0HKDsnxTdiPkbRdMMbdrhGIIEEEqg9BZQt3r3GWdcqyo9Y3ngKTjGj0ciCBofmKKgNBtURiBIIHYEogdAZFLQilmEXrcYivPcCZZQb98Ox9MbmUu5G5U4FEkgggR4G6kmccz2Js2DHx8xBjRlNdW/XK9ZcL28x4Q4CCWQCCTQqyB+vWAL58M/+YwIEtiG9W5ycrx1u4VVj7sbEp9v1nkEggQQSCG4Dg3j3ej4Sww7vFmwB4duTuOc6i69a+lVwgHp6CySQQAI9ALQyll8VvixmftWFz9gCFjXeJkTHx1qdjxnY3ilvN9hRzgIJxI5AAj0E5HOV0d9fCHS7EOh2IdDtQqDbBUGH4pF560XDiXbCc0OuZ4dRfu3gFEy7LFyfkfiQQF68dwQSqDoCjQNCZTi3wiGPxHXWtQ+/Z2i0a3EK5hoelvMUzBuIuGeoLRBS6S2QQAIJ9CCQIW9XO4qjZZxDJ8XjLVTpnd7UyXtHlFOkYkwgDgmEMYE4JBDGBgfNvBkgqHlgr3SIRZZ3vOf9OKhfLVDZCQMTSCCBBHoSiIvs4+3gSzG9X6fAdvEbsZ0W6FAwYCfcNuynuwnkEqgJNMVrgdqwoFjE8F2yxfBFYGNR2bWIZd9C8594GXOdRazJzTUQYC2QQE0ggZ4CavRmK64JMom9sEjvsKOqiFOwb45rsAV4cz8CCSSQFwI9CLSat6gFzSyMnTjern3slOusg+rFmxv/Kv5YBRJIIIHsAaC8M7jY1SnYmMQGu51XtPF+R8hvSHx2ck1uoYuFQAJBAglUGhhUR+KIZS6i98KBFxx4K/s7Mb1pEAW8vx6JBfoqgQQqCTQOKORJTDGWKc5ZbOFd4b30i4r8t4CgLoHeJVBIIIFK44HYWvCh5s7e7nBW49djp7HwnmCw4RO3YAIJZAKFBMKn0UFrX/SJ8/GENUzvFYtOdpdt7Qxs5jq9LU7OpPaOMcoFEojWAgn0CBBj+QPhm4uyoPcBwtosXG+dRhC8W56PWYBgld4CQQIJJNDgIFZYhIxeomVvdwa/oc7xcy2Dz4b0Xvpvt04HbIEEEkigx4Bq0cXuewuBbhcC3S4Eul0IdLtwEML6qKxOtJ7e+fUYTrTXwH4rTmuonYnPMbwVSCCO4a1AAnEMb8cGTX5udQdqA9WLV1DD2/WrgoHtoDgSu+pILBD0q0IggQQaCxQVQKBiEYvuYGHX5R3cMxj2A28WoVMhkEACCRQ6FeOCUhsDuyYPLTjresccdNEBSnn8R2BPkfghgQQSSCAWTwOlduTtVncGjemd5+OLMtcTBK0o0Yli8lwX6CqB3iSQQKX/P8hbKV7E8j8JXG5yY+yXOoX8Kf5xN7Fw2wLF568SSKCSQOOAWvzaymJuKig77eUdClugQ/xnhBb3tRQ7qcx1w7bBawIJJJC/EIgaF+Rn3Zfn7WWOdqjevDOwuabVftw7riNmXN66gUACCYRKIBg8CeQtfPa57uDCGBe1PEYH6Ch8jPtxU5yPuWbHYxZIIIFcAvmaHY9RQS2TmAffyFufCwenUpHRbhebKzuej/NuohtAAgkkUGIEcgNoTNAa1VYgUOMUbEziOhIfW3BxrPk9wwrDomZxPR8LJJBAAj0FRPnAZ1R0YEZnEZ3T2A47ivuxnt5ThPwnTts7OwIJJJBATwJ5FXbRQhJjrp3T28WMnurkXKBo+xZ4rUsh1wVyCSSQQKlxQR6xXMTwtSjoMCGw5zjeNh6JWQSIRY5ZGdC79dM24QIJJJBAzwG1ntEGUGrnojre+stI7youHW67U30/AgkkkEAPA13svr0Q6HYh0O1CoNuFQLcLghoPsUxvFpPfDHjhHSTxyiNx3CawgC5HYsS/xZgrxwQSSCCBngPC4+rw8rGFICax+ddj/j6vI7jmcgo2Lxo3xyIkkL8XiIR4+CKBBBoOFIssMtrn6gut4zVBxquFyHWO+XVE3E3keOO2P9zAx7AfgQQSSKCngMobrxbMYTquCRruXrd+rUt9nn8D27DTCY8tcn2KkM/4d7hAkEAC5XKBhga1OgVbHWIPb4vAtgDRzpUF9tPow7HmW0CusxPUWaDqCSRQ9QQaFNQYsWnHRRHlBFmmd9jN4Z2KjoveXUsUAgkkkEBdw4MgVi0C+/BO0dsqlgGqjq+J+EeF/VhcLRipJYEEKgkkUGlMUM7lInrPvK+NgmISe4cZPXENihWbg/qafmvRcKaeBRJIIIEeAzoUj0rvM9XtqKlfOmBNhjx3emiLkOcY1/jmIIEEEkigp4DSzuKaYGInvDnXHQ7vDS8XgswPy/TJjtGNdxN9jUACCSSQF48AoUqtmG04xEJfDr5c5B2O2TnKNxboYIw7jb/DLJBAAgn0GJDbRYuLAOoXCLRL73YdY2eFl3cY/yy2nusCCSSQQA8DWYRvqzsDiiBsIW4gqJkFxyLk12wVFW54LAIJJNAqUBUPA3n4onX8scWlw0nwzs8LBn0LuR8qDIz7CbEQKD8vdBBIIBNoXNCfkEC3JdBtCXRbAt2WQLf150D/AtAAzykKZW5kc3RyZWFtCmVuZG9iago0IDAgb2JqCjw8L0xlbmd0aCA1MzAvRmlsdGVyL0ZsYXRlRGVjb2RlPj5zdHJlYW0KeJyNlc1y2jAUhfd+Ci3pwo6uZMvyMoEmaRfQpp4uulNtGdRgK9iClj595fBjJ7KhMMxcBp37HR1di413l3qUIY4ZSnMPIz8EGkTHmhDeVh9T76u3ef0Q9Nn+8GBrqwOE7RtQggOK4oSgtPRu7gGBrQpvMtU7lfs/ZG1UoZ6F+ZD+eifhuJVMPpUvhT8X2eq3VA2aPrYLLXODDl5axaGiLA4IRTQh9ktWohtVLjGaafTGzptVtv+pi92J36tbwvieKEc05ocGN/fktKdClGq9n4tSHk32JMB4EEd92TkK4a5uAYw4gKXayepy/051rX/InP65MHJR3KnarMYJne5MIJiAj0Of4mEUxS5KNVI0clHfLmVlUlEvZX8EWhUco5oYmU91fmHTXf+zJR7iiCYYs2FH2A33uiOS4M7Rt31jZDnuCbsHQQJggTUWQABAOacBC5I+46jtOMPuSRw67nciy1Qlv9T6ZbVfiz+qGbXWk5+tAUBCcYRxNEyM3GkvZa4sUqwtM99mZpwXuTPPOGHxMCp0j6YU9bM0qlrebs1K1+qvMOr92ZxmYKKrR73OZT3uJ3SPZvH04AO2L2BJMuwL3NCrbflT1otipht5IW9w8yaDDEjcmI02Yj3/L1BPfg3E3ZAPE2ST1dXM3gPjFD4w2a8XQOSPPG7A3Lsm09vK1PtF8b3jjjOZe+mc/wr+ActjgyoKZW5kc3RyZWFtCmVuZG9iago2IDAgb2JqCjw8L1R5cGUvUGFnZS9NZWRpYUJveFswIDAgNTk1IDg0Ml0vUmVzb3VyY2VzPDwvRm9udDw8L0YxIDEgMCBSL0YyIDMgMCBSPj4vWE9iamVjdDw8L2ltZzAgMiAwIFI+Pj4+L0NvbnRlbnRzIDQgMCBSL1BhcmVudCA1IDAgUj4+CmVuZG9iago3IDAgb2JqCjw8L0xlbmd0aCAzMDYvRmlsdGVyL0ZsYXRlRGVjb2RlPj5zdHJlYW0KeJydk0FPg0AQhe/8ismeaiI4s8B24QaUtjej4WY8oAsVE6gKNjGm/9yDC6ZJTVxa4bTsfG/f5O3sqxVnlitAooBMWQg2yX5xtSQgDllpzT4vsmddwF/1GQBr8ppBCHdgIjRTNj3CcnZpZjYHxoDs4d6kZmr7MIg5crLRs100OrGqHdD4vVFFm9cdlF9vsCpa/f9UVJ1Z+FgNQqQwWYckF3EsEh4HAj3iXKaRl/gUzyNPpstoYT5mdzKtbtMjZqDvZauKoRvpoe8GiGIkWs23H21X1D8ZOSQcLXPIIXKldB3hBMKUus595M52L+d3SkSBiz6iP82r/oeXkFzMJ9rk59tc365sQv2RCIJpdmqYej5CtOoUobqj4fft0VnQzQ9wsh55Z39W9ke7aWbdWN/aeeEWCmVuZHN0cmVhbQplbmRvYmoKOCAwIG9iago8PC9UeXBlL1BhZ2UvTWVkaWFCb3hbMCAwIDU5NSA4NDJdL1Jlc291cmNlczw8L0ZvbnQ8PC9GMSAxIDAgUj4+Pj4vQ29udGVudHMgNyAwIFIvUGFyZW50IDUgMCBSPj4KZW5kb2JqCjEgMCBvYmoKPDwvVHlwZS9Gb250L1N1YnR5cGUvVHlwZTEvQmFzZUZvbnQvSGVsdmV0aWNhL0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZz4+CmVuZG9iagozIDAgb2JqCjw8L1R5cGUvRm9udC9TdWJ0eXBlL1R5cGUxL0Jhc2VGb250L0hlbHZldGljYS1Cb2xkL0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZz4+CmVuZG9iago1IDAgb2JqCjw8L1R5cGUvUGFnZXMvQ291bnQgMi9LaWRzWzYgMCBSIDggMCBSXT4+CmVuZG9iago5IDAgb2JqCjw8L1R5cGUvQ2F0YWxvZy9QYWdlcyA1IDAgUj4+CmVuZG9iagoxMCAwIG9iago8PC9Qcm9kdWNlcihpVGV4dK4gNS41LjEzLjIgqTIwMDAtMjAyMCBpVGV4dCBHcm91cCBOViBcKEFHUEwtdmVyc2lvblwpKS9DcmVhdGlvbkRhdGUoRDoyMDIxMDUwNjE0MDUzNyswMicwMCcpL01vZERhdGUoRDoyMDIxMDUwNjE0MDUzNyswMicwMCcpPj4KZW5kb2JqCnhyZWYKMCAxMQowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDM3MjEgMDAwMDAgbiAKMDAwMDAwMDAxNSAwMDAwMCBuIAowMDAwMDAzODA5IDAwMDAwIG4gCjAwMDAwMDI0OTUgMDAwMDAgbiAKMDAwMDAwMzkwMiAwMDAwMCBuIAowMDAwMDAzMDkyIDAwMDAwIG4gCjAwMDAwMDMyMzYgMDAwMDAgbiAKMDAwMDAwMzYwOSAwMDAwMCBuIAowMDAwMDAzOTU5IDAwMDAwIG4gCjAwMDAwMDQwMDQgMDAwMDAgbiAKdHJhaWxlcgo8PC9TaXplIDExL1Jvb3QgOSAwIFIvSW5mbyAxMCAwIFIvSUQgWzxiYzNkMmU5Mjc0N2U0MDY4YWIxYzc2OWZlYjVmMDg2ZT48YmMzZDJlOTI3NDdlNDA2OGFiMWM3NjlmZWI1ZjA4NmU+XT4+CiVpVGV4dC01LjUuMTMuMgpzdGFydHhyZWYKNDE2NQolJUVPRgo=';
		const result = service.PDFtoBlob(pdfString);

		expect(result.type).toBe('application/pdf');
	});
});
